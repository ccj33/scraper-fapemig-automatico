#!/usr/bin/env python3
"""
Gerador de Resumos Melhorados para Scraping
===========================================

Transforma dados brutos em resumos leg√≠veis e organizados
Inclui informa√ß√µes extra√≠das de PDFs
"""

from datetime import datetime, timedelta
from typing import List, Dict

class GeradorResumoMelhorado:
    """Gera resumos leg√≠veis e organizados dos dados de scraping"""
    
    def __init__(self, dados_scraping: Dict):
        self.dados = dados_scraping
        self.timestamp = datetime.now()
        
    def gerar_resumo_completo(self) -> str:
        """Gera resumo completo e leg√≠vel"""
        
        resumo = f"""
üöÄ RELAT√ìRIO COMPLETO DE OPORTUNIDADES
=======================================
üìÖ Gerado em: {self.timestamp.strftime('%d/%m/%Y √†s %H:%M:%S')}
üéØ Total de Oportunidades: {self.dados.get('total_editais', 0)}

{'='*60}

üìö UFMG - EDITAIS E CHAMADAS
{'='*60}
{self._formatar_ufmg()}

{'='*60}

üî¨ FAPEMIG - OPORTUNIDADES
{'='*60}
{self._formatar_fapemig()}

{'='*60}

üìñ CNPq - CHAMADAS P√öBLICAS
{'='*60}
{self._formatar_cnpq()}

{'='*60}

üìÑ AN√ÅLISE DE PDFs EXTRA√çDOS
{'='*60}
{self._formatar_analise_pdfs()}

{'='*60}

üìä RESUMO EXECUTIVO
{'='*60}
{self._gerar_resumo_executivo()}

{'='*60}

ü§ñ Sistema automatizado via GitHub Actions
üìß Enviado automaticamente para: {self._get_email_destino()}
‚è∞ Pr√≥xima execu√ß√£o: {self._get_proxima_execucao()}
        """
        
        return resumo
        
    def _formatar_ufmg(self) -> str:
        """Formata dados da UFMG de forma leg√≠vel"""
        ufmg_data = self.dados.get('ufmg', [])
        
        if not ufmg_data:
            return "‚ùå Nenhum edital encontrado"
            
        formatted = f"üìã Total de Editais: {len(ufmg_data)}\n\n"
        
        for i, edital in enumerate(ufmg_data, 1):
            formatted += f"üî∏ EDITAL #{i}\n"
            formatted += f"   üìù T√≠tulo: {edital.get('titulo', 'Sem t√≠tulo')}\n"
            
            if 'data' in edital and edital['data'] != "Data n√£o encontrada":
                formatted += f"   üìÖ Data: {edital['data']}\n"
                
            if 'valor' in edital and edital['valor'] != "Valor n√£o informado":
                formatted += f"   üí∞ Valor: {edital['valor']}"
                if edital.get('valor_fonte') == 'PDF extra√≠do':
                    formatted += " (üìÑ Extra√≠do do PDF)"
                formatted += "\n"
                
            if 'prazo' in edital and edital['prazo'] != "Prazo n√£o informado":
                formatted += f"   ‚è∞ Prazo: {edital['prazo']}"
                if edital.get('prazo_fonte') == 'PDF extra√≠do':
                    formatted += " (üìÑ Extra√≠do do PDF)"
                formatted += "\n"
                
            if 'objetivo' in edital and edital['objetivo'] != "Objetivo n√£o informado":
                formatted += f"   üéØ Objetivo: {edital['objetivo'][:100]}..."
                if edital.get('objetivo_fonte') == 'PDF extra√≠do':
                    formatted += " (üìÑ Extra√≠do do PDF)"
                formatted += "\n"
                
            formatted += f"   üîó Link: {edital.get('url', 'N√£o dispon√≠vel')}\n"
            
            # Informa√ß√µes do PDF se dispon√≠vel
            if edital.get('pdf_extraido'):
                formatted += f"   üìÑ PDF: ‚úÖ Extra√≠do ({edital.get('pdf_paginas', 'N/A')} p√°ginas)\n"
                if edital.get('pdf_valor_encontrado'):
                    formatted += f"      üí∞ Valor no PDF: {edital['pdf_valor_encontrado']}\n"
                if edital.get('pdf_prazo_encontrado'):
                    formatted += f"      ‚è∞ Prazo no PDF: {edital['pdf_prazo_encontrado']}\n"
                if edital.get('pdf_objetivo_encontrado'):
                    formatted += f"      üéØ Objetivo no PDF: {edital['pdf_objetivo_encontrado'][:80]}...\n"
            elif edital.get('pdf_erro'):
                formatted += f"   üìÑ PDF: ‚ùå Erro - {edital['pdf_erro']}\n"
            else:
                formatted += f"   üìÑ PDF: ‚ö†Ô∏è N√£o processado\n"
                
            formatted += "\n"
            
        return formatted
        
    def _formatar_fapemig(self) -> str:
        """Formata dados da FAPEMIG de forma leg√≠vel"""
        fapemig_data = self.dados.get('fapemig', [])
        
        if not fapemig_data:
            return "‚ùå Nenhuma oportunidade encontrada"
            
        formatted = f"üìã Total de Oportunidades: {len(fapemig_data)}\n\n"
        
        for i, oportunidade in enumerate(fapemig_data, 1):
            formatted += f"üî∏ OPORTUNIDADE #{i}\n"
            formatted += f"   üìù T√≠tulo: {oportunidade.get('titulo', 'Sem t√≠tulo')}\n"
            
            if 'valor' in oportunidade and oportunidade['valor'] != "Valor n√£o informado":
                formatted += f"   üí∞ Valor: {oportunidade['valor']}"
                if oportunidade.get('valor_fonte') == 'PDF extra√≠do':
                    formatted += " (üìÑ Extra√≠do do PDF)"
                formatted += "\n"
                
            if 'prazo' in oportunidade and oportunidade['prazo'] != "Prazo n√£o informado":
                formatted += f"   ‚è∞ Prazo: {oportunidade['prazo']}"
                if oportunidade.get('prazo_fonte') == 'PDF extra√≠do':
                    formatted += " (üìÑ Extra√≠do do PDF)"
                formatted += "\n"
                
            if 'url' in oportunidade:
                formatted += f"   üîó Link: {oportunidade['url']}\n"
            
            # Informa√ß√µes do PDF se dispon√≠vel
            if oportunidade.get('pdf_extraido'):
                formatted += f"   üìÑ PDF: ‚úÖ Extra√≠do ({oportunidade.get('pdf_paginas', 'N/A')} p√°ginas)\n"
                if oportunidade.get('pdf_valor_encontrado'):
                    formatted += f"      üí∞ Valor no PDF: {oportunidade['pdf_valor_encontrado']}\n"
                if oportunidade.get('pdf_prazo_encontrado'):
                    formatted += f"      ‚è∞ Prazo no PDF: {oportunidade['pdf_prazo_encontrado']}\n"
                if oportunidade.get('pdf_objetivo_encontrado'):
                    formatted += f"      üéØ Objetivo no PDF: {oportunidade['pdf_objetivo_encontrado'][:80]}...\n"
            elif oportunidade.get('pdf_erro'):
                formatted += f"   üìÑ PDF: ‚ùå Erro - {oportunidade['pdf_erro']}\n"
            else:
                formatted += f"   üìÑ PDF: ‚ö†Ô∏è N√£o processado\n"
                
            formatted += "\n"
            
        return formatted
        
    def _formatar_cnpq(self) -> str:
        """Formata dados do CNPq de forma leg√≠vel"""
        cnpq_data = self.dados.get('cnpq', [])
        
        if not cnpq_data:
            return "‚ùå Nenhuma chamada encontrada"
            
        formatted = f"üìã Total de Chamadas: {len(cnpq_data)}\n\n"
        
        for i, chamada in enumerate(cnpq_data, 1):
            formatted += f"üî∏ CHAMADA #{i}\n"
            formatted += f"   üìù T√≠tulo: {chamada.get('titulo', 'Sem t√≠tulo')}\n"
            
            if 'periodo_inscricao' in chamada and chamada['periodo_inscricao'] != "Per√≠odo n√£o encontrado":
                formatted += f"   üìÖ Per√≠odo: {chamada['periodo_inscricao']}"
                if chamada.get('periodo_fonte') == 'PDF extra√≠do':
                    formatted += " (üìÑ Extra√≠do do PDF)"
                formatted += "\n"
                
            if 'valor' in chamada and chamada['valor'] != "Valor n√£o informado":
                formatted += f"   üí∞ Valor: {chamada['valor']}"
                if chamada.get('valor_fonte') == 'PDF extra√≠do':
                    formatted += " (üìÑ Extra√≠do do PDF)"
                formatted += "\n"
                
            if 'descricao' in chamada and chamada['descricao'] != "Descri√ß√£o n√£o informada":
                formatted += f"   üìñ Descri√ß√£o: {chamada['descricao'][:100]}..."
                if chamada.get('descricao_fonte') == 'PDF extra√≠do':
                    formatted += " (üìÑ Extra√≠do do PDF)"
                formatted += "\n"
                
            if 'url_detalhes' in chamada:
                formatted += f"   üîó Detalhes: {chamada['url_detalhes']}\n"
            
            # Informa√ß√µes do PDF se dispon√≠vel
            if chamada.get('pdf_extraido'):
                formatted += f"   üìÑ PDF: ‚úÖ Extra√≠do ({chamada.get('pdf_paginas', 'N/A')} p√°ginas)\n"
                if chamada.get('pdf_valor_encontrado'):
                    formatted += f"      üí∞ Valor no PDF: {chamada['pdf_valor_encontrado']}\n"
                if chamada.get('pdf_prazo_encontrado'):
                    formatted += f"      ‚è∞ Prazo no PDF: {chamada['pdf_prazo_encontrado']}\n"
                if chamada.get('pdf_objetivo_encontrado'):
                    formatted += f"      üéØ Objetivo no PDF: {chamada['pdf_objetivo_encontrado'][:80]}...\n"
            elif chamada.get('pdf_erro'):
                formatted += f"   üìÑ PDF: ‚ùå Erro - {chamada['pdf_erro']}\n"
            else:
                formatted += f"   üìÑ PDF: ‚ö†Ô∏è N√£o processado\n"
                
            formatted += "\n"
            
        return formatted
    
    def _formatar_analise_pdfs(self) -> str:
        """Formata an√°lise dos PDFs extra√≠dos"""
        pdf_metadata = self.dados.get('pdf_metadata', {})
        
        if not pdf_metadata:
            return "‚ùå Nenhum PDF foi processado"
        
        total_pdfs = pdf_metadata.get('total_pdfs_processados', 0)
        data_processamento = pdf_metadata.get('data_processamento', 'N/A')
        
        if total_pdfs == 0:
            return "‚ö†Ô∏è Nenhum PDF foi extra√≠do com sucesso"
        
        # Contar PDFs por fonte
        ufmg_pdfs = sum(1 for item in self.dados.get('ufmg', []) if item.get('pdf_extraido'))
        fapemig_pdfs = sum(1 for item in self.dados.get('fapemig', []) if item.get('pdf_extraido'))
        cnpq_pdfs = sum(1 for item in self.dados.get('cnpq', []) if item.get('pdf_extraido'))
        
        # Estat√≠sticas dos PDFs
        total_paginas = 0
        total_caracteres = 0
        idiomas = {'portugu√™s': 0, 'ingl√™s': 0}
        
        for fonte in ['ufmg', 'fapemig', 'cnpq']:
            for item in self.dados.get(fonte, []):
                if item.get('pdf_extraido'):
                    total_paginas += item.get('pdf_paginas', 0)
                    if item.get('pdf_estatisticas'):
                        total_caracteres += item.get('pdf_estatisticas', {}).get('total_caracteres', 0)
                    if item.get('pdf_idioma'):
                        idiomas[item.get('pdf_idioma')] = idiomas.get(item.get('pdf_idioma'), 0) + 1
        
        formatted = f"""
üìä ESTAT√çSTICAS DOS PDFs EXTRA√çDOS:
   ‚Ä¢ Total de PDFs processados: {total_pdfs}
   ‚Ä¢ Data de processamento: {data_processamento}
   ‚Ä¢ UFMG: {ufmg_pdfs} PDFs
   ‚Ä¢ FAPEMIG: {fapemig_pdfs} PDFs  
   ‚Ä¢ CNPq: {cnpq_pdfs} PDFs

üìÑ AN√ÅLISE DO CONTE√öDO:
   ‚Ä¢ Total de p√°ginas: {total_paginas}
   ‚Ä¢ Total de caracteres: {total_caracteres:,}
   ‚Ä¢ Idiomas detectados: {', '.join([f'{k}: {v}' for k, v in idiomas.items() if v > 0])}

üéØ BENEF√çCIOS DA EXTRA√á√ÉO:
   ‚Ä¢ Dados mais completos e precisos
   ‚Ä¢ Informa√ß√µes extra√≠das diretamente dos documentos
   ‚Ä¢ Complementa√ß√£o autom√°tica de campos vazios
   ‚Ä¢ An√°lise de conte√∫do dos editais
        """
        
        return formatted
        
    def _gerar_resumo_executivo(self) -> str:
        """Gera resumo executivo dos dados"""
        total = self.dados.get('total_editais', 0)
        ufmg_count = len(self.dados.get('ufmg', []))
        fapemig_count = len(self.dados.get('fapemig', []))
        cnpq_count = len(self.dados.get('cnpq', []))
        
        # Contar PDFs extra√≠dos
        total_pdfs = 0
        for fonte in ['ufmg', 'fapemig', 'cnpq']:
            for item in self.dados.get(fonte, []):
                if item.get('pdf_extraido'):
                    total_pdfs += 1
        
        resumo = f"""
üìà ESTAT√çSTICAS GERAIS:
   ‚Ä¢ Total de Oportunidades: {total}
   ‚Ä¢ UFMG: {ufmg_count} editais
   ‚Ä¢ FAPEMIG: {fapemig_count} oportunidades  
   ‚Ä¢ CNPq: {cnpq_count} chamadas
   ‚Ä¢ PDFs extra√≠dos: {total_pdfs}

üéØ PR√ìXIMOS PASSOS RECOMENDADOS:
   ‚Ä¢ Verificar prazos de inscri√ß√£o
   ‚Ä¢ Analisar valores e recursos dispon√≠veis
   ‚Ä¢ Identificar oportunidades mais relevantes
   ‚Ä¢ Preparar documenta√ß√£o necess√°ria

üí° DICAS IMPORTANTES:
   ‚Ä¢ Sempre verifique os links originais
   ‚Ä¢ Confirme datas e prazos nos sites oficiais
   ‚Ä¢ Prepare documentos com anteced√™ncia
   ‚Ä¢ Entre em contato em caso de d√∫vidas
   ‚Ä¢ PDFs extra√≠dos fornecem informa√ß√µes complementares

üöÄ NOVIDADES DO SISTEMA:
   ‚Ä¢ ‚úÖ Extra√ß√£o autom√°tica de PDFs
   ‚Ä¢ ‚úÖ An√°lise de conte√∫do dos documentos
   ‚Ä¢ ‚úÖ Complementa√ß√£o autom√°tica de dados
   ‚Ä¢ ‚úÖ Detec√ß√£o de idioma dos documentos
        """
        
        return resumo
        
    def _get_email_destino(self) -> str:
        """Retorna email de destino"""
        return "clevioferreira@gmail.com"
        
    def _get_proxima_execucao(self) -> str:
        """Calcula pr√≥xima execu√ß√£o (amanh√£ √†s 05:00 BRT)"""
        amanha = self.timestamp + timedelta(days=1)
        return amanha.strftime('%d/%m/%Y √†s 05:00 BRT')

def main():
    """Teste do gerador de resumos"""
    # Dados de exemplo com PDFs extra√≠dos
    dados_exemplo = {
        'ufmg': [
            {
                'titulo': 'Edital PROEX n¬∫ 08/2025 ‚Äì Programa de Apoio Integrado a Eventos',
                'data': '15/08/2025',
                'valor': 'R$ 5.000,00',
                'url': 'https://exemplo.com/edital1.pdf',
                'pdf_extraido': True,
                'pdf_paginas': 15,
                'pdf_valor_encontrado': 'R$ 5.000,00',
                'pdf_prazo_encontrado': '30/09/2025',
                'pdf_objetivo_encontrado': 'Apoiar eventos acad√™micos e cient√≠ficos',
                'pdf_idioma': 'portugu√™s'
            }
        ],
        'fapemig': [
            {
                'titulo': 'CHAMADA FAPEMIG 011/2025 - DEEP TECH - INSER√á√ÉO NO MERCADO E INOVA√á√ÉO',
                'valor': 'R$ 50.000,00',
                'url': 'https://exemplo.com/chamada1.pdf',
                'pdf_extraido': True,
                'pdf_paginas': 25,
                'pdf_valor_encontrado': 'R$ 50.000,00',
                'pdf_prazo_encontrado': '15/10/2025',
                'pdf_idioma': 'portugu√™s'
            }
        ],
        'cnpq': [
            {
                'titulo': 'CHAMADA ERC- CNPQ - 2025 N¬∫ 13/2025',
                'periodo_inscricao': '01/09/2025 a 30/09/2025',
                'url_detalhes': 'https://exemplo.com/cnpq1.pdf',
                'pdf_extraido': True,
                'pdf_paginas': 20,
                'pdf_idioma': 'portugu√™s'
            }
        ],
        'total_editais': 3,
        'pdf_metadata': {
            'data_processamento': '2025-01-16T10:30:00',
            'total_pdfs_processados': 3,
            'versao_integrador': '1.0.0'
        }
    }
    
    gerador = GeradorResumoMelhorado(dados_exemplo)
    resumo = gerador.gerar_resumo_completo()
    
    print(resumo)

if __name__ == "__main__":
    main()

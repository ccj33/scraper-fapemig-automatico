import smtplib
from email.mime.text import MIMEText
import os
import time
import json
from datetime import datetime
from selenium import webdriver
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
import chromedriver_autoinstaller

def send_email(msg_text):
    """Envia email com as atualiza√ß√µes encontradas"""
    try:
        msg = MIMEText(msg_text, 'plain', 'utf-8')
        msg['Subject'] = 'üöÄ Atualiza√ß√£o FAPEMIG - Novas Oportunidades Encontradas!'
        msg['From'] = os.environ['EMAIL_USER']
        msg['To'] = os.environ['EMAIL_USER']

        with smtplib.SMTP_SSL('smtp.gmail.com', 465) as server:
            server.login(os.environ['EMAIL_USER'], os.environ['EMAIL_PASS'])
            server.send_message(msg)
        print("‚úÖ Email enviado com sucesso!")
        return True
    except Exception as e:
        print(f"‚ùå Erro ao enviar email: {e}")
        return False

def extrair_chamadas_fapemig():
    """Extrai chamadas da FAPEMIG usando Selenium headless"""
    print("üöÄ Iniciando extra√ß√£o FAPEMIG...")
    
    # Instala e configura o ChromeDriver
    chromedriver_autoinstaller.install()
    
    # Configura√ß√µes para modo headless (GitHub Actions)
    options = Options()
    options.add_argument("--headless")          # Roda sem interface
    options.add_argument("--no-sandbox")        # Necess√°rio para Linux
    options.add_argument("--disable-dev-shm-usage")  # Evita problemas de mem√≥ria
    options.add_argument("--disable-gpu")       # Desabilita GPU
    options.add_argument("--window-size=1920,1080")  # Tamanho da janela virtual
    options.add_argument("--user-agent=Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36")
    
    try:
        driver = webdriver.Chrome(options=options)
        print("‚úÖ Navegador iniciado em modo headless")
        
        # URL da FAPEMIG
        url_fapemig = "https://fapemig.br/chamadas/"
        print(f"üåê Acessando: {url_fapemig}")
        
        driver.get(url_fapemig)
        time.sleep(5)  # Aguarda carregamento
        
        # Verifica se a p√°gina carregou
        if "FAPEMIG" not in driver.title:
            print("‚ö†Ô∏è P√°gina pode n√£o ter carregado completamente")
        
        # Procura por elementos de chamadas/editais
        chamadas_encontradas = []
        
        # Estrat√©gia 1: Procurar por links que contenham "chamada" ou "edital"
        try:
            links_chamadas = driver.find_elements(By.XPATH, "//a[contains(translate(text(), 'CHAMADA', 'chamada'), 'chamada') or contains(translate(text(), 'EDITAL', 'edital'), 'edital')]")
            
            for link in links_chamadas[:10]:  # Limita a 10 para n√£o sobrecarregar
                try:
                    texto = link.text.strip()
                    href = link.get_attribute("href")
                    if texto and href and len(texto) > 5:
                        chamadas_encontradas.append({
                            'titulo': texto,
                            'url': href,
                            'data_extracao': datetime.now().strftime("%Y-%m-%d %H:%M:%S")
                        })
                except:
                    continue
        except Exception as e:
            print(f"‚ö†Ô∏è Erro ao buscar links espec√≠ficos: {e}")
        
        # Estrat√©gia 2: Procurar por elementos com classes comuns
        if not chamadas_encontradas:
            try:
                elementos_gerais = driver.find_elements(By.CSS_SELECTOR, "a, .card, .item, .chamada, .edital")
                
                for elem in elementos_gerais[:20]:
                    try:
                        texto = elem.text.strip()
                        href = elem.get_attribute("href")
                        if texto and href and len(texto) > 10 and any(palavra in texto.lower() for palavra in ['chamada', 'edital', 'oportunidade', 'financiamento']):
                            chamadas_encontradas.append({
                                'titulo': texto,
                                'url': href,
                                'data_extracao': datetime.now().strftime("%Y-%m-%d %H:%M:%S")
                            })
                    except:
                        continue
            except Exception as e:
                print(f"‚ö†Ô∏è Erro ao buscar elementos gerais: {e}")
        
        # Estrat√©gia 3: Extrair texto da p√°gina para an√°lise
        try:
            corpo = driver.find_element(By.TAG_NAME, "body")
            texto_pagina = corpo.text
            
            # Salva o texto da p√°gina para an√°lise posterior
            with open("pagina_fapemig.txt", "w", encoding="utf-8") as f:
                f.write(texto_pagina)
            print("üìÑ Texto da p√°gina salvo para an√°lise")
            
        except Exception as e:
            print(f"‚ö†Ô∏è Erro ao extrair texto da p√°gina: {e}")
        
        driver.quit()
        print("‚úÖ Navegador fechado")
        
        return chamadas_encontradas
        
    except Exception as e:
        print(f"‚ùå Erro cr√≠tico: {e}")
        return []

def main():
    """Fun√ß√£o principal que executa o scraping e envia email"""
    print("=" * 60)
    print("üöÄ SCRAPER FAPEMIG - GITHUB ACTIONS")
    print("=" * 60)
    
    # Executa o scraping
    chamadas = extrair_chamadas_fapemig()
    
    if not chamadas:
        print("‚ùå Nenhuma chamada encontrada")
        return
    
    print(f"\n‚úÖ Encontradas {len(chamadas)} chamadas/oportunidades:")
    
    # Prepara o conte√∫do do email
    email_content = f"""
üöÄ ATUALIZA√á√ÉO FAPEMIG - {datetime.now().strftime('%d/%m/%Y %H:%M')}

Encontradas {len(chamadas)} novas oportunidades:

"""
    
    for i, chamada in enumerate(chamadas, 1):
        print(f"{i}. {chamada['titulo']}")
        print(f"   URL: {chamada['url']}")
        
        email_content += f"""
{i}. {chamada['titulo']}
   URL: {chamada['url']}
   Data de extra√ß√£o: {chamada['data_extracao']}
"""
    
    email_content += f"""

---
ü§ñ Scraper automatizado executado via GitHub Actions
üìÖ Executado em: {datetime.now().strftime('%d/%m/%Y √†s %H:%M:%S')}
üåê Fonte: https://fapemig.br/chamadas/
"""
    
    # Salva os dados em arquivo local (para debug)
    try:
        with open("chamadas_encontradas.json", "w", encoding="utf-8") as f:
            json.dump(chamadas, f, ensure_ascii=False, indent=2)
        print("üíæ Dados salvos em chamadas_encontradas.json")
    except Exception as e:
        print(f"‚ö†Ô∏è Erro ao salvar arquivo: {e}")
    
    # Envia email se as vari√°veis de ambiente estiverem configuradas
    if 'EMAIL_USER' in os.environ and 'EMAIL_PASS' in os.environ:
        print("\nüìß Enviando email...")
        if send_email(email_content):
            print("‚úÖ Processo conclu√≠do com sucesso!")
        else:
            print("‚ö†Ô∏è Scraping conclu√≠do, mas email n√£o foi enviado")
    else:
        print("\n‚ö†Ô∏è Vari√°veis de email n√£o configuradas")
        print("üìß Conte√∫do que seria enviado:")
        print("-" * 40)
        print(email_content)
        print("-" * 40)

if __name__ == "__main__":
    main()

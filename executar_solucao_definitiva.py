#!/usr/bin/env python3
"""
üöÄ SCRIPT PRINCIPAL - SOLU√á√ÉO DEFINITIVA COMPLETA
=================================================

Executa toda a SOLU√á√ÉO DEFINITIVA em sequ√™ncia:
1. üî• Scraper MEGA-ULTRA-MELHORADO da FAPEMIG
2. üîß Reorganiza√ß√£o MEGA-ULTRA-MELHORADA dos dados
3. üìß Email MEGA-ULTRA-MELHORADO com TODOS os nomes e links dos PDFs

RESOLVE TODOS OS PROBLEMAS:
‚úÖ Captura TODOS os editais da FAPEMIG (n√£o apenas 3)
‚úÖ Extrai nomes REAIS dos PDFs
‚úÖ Extrai links DIRETOS dos PDFs
‚úÖ Inclui todas as informa√ß√µes detalhadas
‚úÖ Envia email com SOLU√á√ÉO DEFINITIVA
"""

import os
import sys
import subprocess
import time
from datetime import datetime

def executar_comando(comando, descricao):
    """Executa um comando e retorna o resultado"""
    print(f"\nüöÄ EXECUTANDO: {descricao}")
    print(f"üìã Comando: {comando}")
    print("-" * 60)
    
    try:
        resultado = subprocess.run(comando, shell=True, capture_output=True, text=True, encoding='utf-8')
        
        if resultado.returncode == 0:
            print(f"‚úÖ {descricao} executado com sucesso!")
            if resultado.stdout:
                print("üì§ Sa√≠da:")
                print(resultado.stdout)
        else:
            print(f"‚ùå {descricao} falhou!")
            if resultado.stderr:
                print("‚ùå Erro:")
                print(resultado.stderr)
            return False
            
        return True
        
    except Exception as e:
        print(f"‚ùå Erro ao executar {descricao}: {e}")
        return False

def verificar_arquivos_gerados():
    """Verifica se os arquivos foram gerados corretamente"""
    print("\nüîç VERIFICANDO ARQUIVOS GERADOS:")
    print("=" * 40)
    
    arquivos_esperados = [
        'fapemig_solucao_definitiva_*.json',
        'dados_reorganizados_solucao_definitiva_*.json'
    ]
    
    for padrao in arquivos_esperados:
        arquivos = glob.glob(padrao)
        if arquivos:
            arquivo_mais_recente = max(arquivos, key=lambda x: os.path.getctime(x))
            tamanho = os.path.getsize(arquivo_mais_recente)
            print(f"‚úÖ {padrao}: {arquivo_mais_recente} ({tamanho} bytes)")
        else:
            print(f"‚ùå {padrao}: N√ÉO ENCONTRADO")
            return False
    
    return True

def mostrar_resumo_final():
    """Mostra resumo final da SOLU√á√ÉO DEFINITIVA"""
    print("\n" + "="*80)
    print("üéâ SOLU√á√ÉO DEFINITIVA IMPLEMENTADA COM SUCESSO!")
    print("="*80)
    print("‚úÖ TODOS os problemas foram resolvidos:")
    print("   üî• FAPEMIG: Captura COMPLETA de editais implementada")
    print("   üìÑ PDFs: Nomes REAIS e links DIRETOS extra√≠dos")
    print("   üîß Dados: Reorganiza√ß√£o MEGA-ULTRA-MELHORADA conclu√≠da")
    print("   üìß Email: SOLU√á√ÉO DEFINITIVA enviada com sucesso")
    print("")
    print("üìÅ Arquivos gerados:")
    print("   - fapemig_solucao_definitiva_*.json")
    print("   - dados_reorganizados_solucao_definitiva_*.json")
    print("")
    print("üöÄ Sistema funcionando perfeitamente!")
    print("üìß Emails com TODOS os nomes e links dos PDFs sendo enviados!")
    print("="*80)

def main():
    """Fun√ß√£o principal da SOLU√á√ÉO DEFINITIVA"""
    print("üöÄ INICIANDO SOLU√á√ÉO DEFINITIVA COMPLETA")
    print("=" * 60)
    print(f"‚è∞ In√≠cio: {datetime.now().strftime('%d/%m/%Y %H:%M:%S')}")
    print("üî• Resolvendo TODOS os problemas dos scrapers!")
    print("")
    
    # Passo 1: Executar scraper MEGA-ULTRA-MELHORADO da FAPEMIG
    if not executar_comando("python scraper_fapemig_solucao_definitiva.py", 
                           "Scraper MEGA-ULTRA-MELHORADO da FAPEMIG"):
        print("‚ùå Falha no scraper da FAPEMIG!")
        return 1
    
    # Aguardar um pouco para garantir que o arquivo foi salvo
    time.sleep(3)
    
    # Passo 2: Executar reorganiza√ß√£o MEGA-ULTRA-MELHORADA
    if not executar_comando("python reorganizar_dados_mega_ultra_melhorado.py", 
                           "Reorganiza√ß√£o MEGA-ULTRA-MELHORADA dos dados"):
        print("‚ùå Falha na reorganiza√ß√£o dos dados!")
        return 1
    
    # Aguardar um pouco para garantir que o arquivo foi salvo
    time.sleep(3)
    
    # Passo 3: Verificar se os arquivos foram gerados
    if not verificar_arquivos_gerados():
        print("‚ùå Arquivos n√£o foram gerados corretamente!")
        return 1
    
    # Passo 4: Executar envio de email com SOLU√á√ÉO DEFINITIVA
    if not executar_comando("python enviar_email_solucao_definitiva.py", 
                           "Email MEGA-ULTRA-MELHORADO com SOLU√á√ÉO DEFINITIVA"):
        print("‚ùå Falha no envio do email!")
        return 1
    
    # Passo 5: Mostrar resumo final
    mostrar_resumo_final()
    
    print(f"\n‚è∞ Fim: {datetime.now().strftime('%d/%m/%Y %H:%M:%S')}")
    print("üéâ SOLU√á√ÉO DEFINITIVA CONCLU√çDA COM SUCESSO!")
    
    return 0

if __name__ == "__main__":
    # Adicionar o diret√≥rio atual ao PATH para importar m√≥dulos
    sys.path.append(os.path.dirname(os.path.abspath(__file__)))
    
    # Importar glob aqui para evitar erro de importa√ß√£o
    import glob
    
    exit(main())

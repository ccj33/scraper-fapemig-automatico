#!/usr/bin/env python3
"""
Teste espec√≠fico para o scraper do CNPq melhorado
"""

def test_cnpq_selectors():
    """Testa os diferentes seletores para encontrar chamadas do CNPq"""
    
    print("üß™ TESTE DOS SELETORES DO CNPq")
    print("=" * 60)
    
    # Simular diferentes tipos de elementos que podem conter chamadas
    elementos_teste = [
        {
            'tipo': 'h4',
            'texto': 'CHAMADA ERC- CNPQ - 2025 N¬∫ 13/2025',
            'classe': 'chamada-publica'
        },
        {
            'tipo': 'h3',
            'texto': 'Chamada Universal 2025',
            'classe': 'edital'
        },
        {
            'tipo': 'div',
            'texto': 'Programa de Bolsas de Produtividade em Pesquisa',
            'classe': 'programa-cnpq'
        },
        {
            'tipo': 'li',
            'texto': 'CHAMADA PIBIC 2025 - Bolsas de Inicia√ß√£o Cient√≠fica',
            'classe': 'item-lista'
        },
        {
            'tipo': 'a',
            'texto': 'Chamada para Apoio a Eventos Cient√≠ficos',
            'classe': 'link-chamada'
        }
    ]
    
    # Simular os seletores do scraper
    selectors = [
        '//h4[contains(text(), "CHAMADA") or contains(text(), "Chamada")]',
        '//h3[contains(text(), "CHAMADA") or contains(text(), "Chamada")]',
        '//h2[contains(text(), "CHAMADA") or contains(text(), "Chamada")]',
        '//h1[contains(text(), "CHAMADA") or contains(text(), "Chamada")]',
        '//div[contains(@class, "chamada") or contains(@class, "edital")]',
        '//li[contains(text(), "CHAMADA") or contains(text(), "Chamada")]',
        '//a[contains(text(), "CHAMADA") or contains(text(), "Chamada")]'
    ]
    
    print("üìã Seletores dispon√≠veis:")
    for i, selector in enumerate(selectors, 1):
        print(f"   {i}. {selector}")
    
    print("\nüîç Elementos de teste:")
    for elemento in elementos_teste:
        print(f"   {elemento['tipo'].upper()}: {elemento['texto']}")
        print(f"      Classe: {elemento['classe']}")
        
        # Verificar se seria detectado pelos seletores
        detectado = False
        for selector in selectors:
            if elemento['tipo'] in selector and any(palavra in elemento['texto'].lower() for palavra in ['chamada', 'edital', 'programa', 'bolsa']):
                detectado = True
                break
        
        if detectado:
            print(f"      ‚úÖ Seria detectado pelos seletores")
        else:
            print(f"      ‚ùå N√ÉO seria detectado pelos seletores")
        print()
    
    print("‚úÖ Teste dos seletores conclu√≠do!")

def test_cnpq_urls():
    """Testa as URLs do CNPq"""
    
    print("\nüåê TESTE DAS URLs DO CNPq")
    print("=" * 60)
    
    urls = [
        "https://www.gov.br/cnpq/pt-br/acesso-a-informacao/acoes-e-programas/programas/chamadas-publicas",
        "https://www.gov.br/cnpq/pt-br/acesso-a-informacao/acoes-e-programas/programas",
        "http://memoria2.cnpq.br/web/guest/chamadas-publicas"
    ]
    
    print("üìã URLs configuradas:")
    for i, url in enumerate(urls, 1):
        print(f"   {i}. {url}")
        if "gov.br" in url:
            print(f"      ‚úÖ URL oficial do governo")
        elif "memoria2.cnpq.br" in url:
            print(f"      ‚ö†Ô∏è URL antiga (fallback)")
        print()
    
    print("‚úÖ Teste das URLs conclu√≠do!")

def test_cnpq_data_structure():
    """Testa a estrutura de dados das chamadas do CNPq"""
    
    print("\nüìä TESTE DA ESTRUTURA DE DADOS")
    print("=" * 60)
    
    # Simular dados como seriam retornados pelo scraper melhorado
    chamada_exemplo = {
        'titulo': 'CHAMADA ERC- CNPQ - 2025 N¬∫ 13/2025',
        'periodo_inscricao': 'Inscri√ß√µes: 11/08/2025 a 30/09/2025',
        'url_detalhes': 'https://www.gov.br/cnpq/pt-br/acesso-a-informacao/acoes-e-programas/programas/chamadas-publicas/erc-2025',
        'fonte': 'CNPq',
        'pdf_baixado': 'pdfs_baixados/chamada_erc_2025.pdf',
        'pdf_url': 'https://www.gov.br/cnpq/pt-br/acesso-a-informacao/acoes-e-programas/programas/chamadas-publicas/erc-2025/edital.pdf',
        'pdf_info': {
            'datas_encontradas': ['11/08/2025', '30/09/2025'],
            'valores_encontrados': ['R$ 50.000,00', 'R$ 100.000,00']
        },
        'data_extracao': '2025-08-17 18:00:00'
    }
    
    print("üìã Estrutura da chamada:")
    for campo, valor in chamada_exemplo.items():
        if campo == 'pdf_info':
            print(f"   üìÑ {campo}:")
            for subcampo, subvalor in valor.items():
                print(f"      ‚Ä¢ {subcampo}: {subvalor}")
        else:
            print(f"   {campo}: {valor}")
    
    print("\n‚úÖ Teste da estrutura de dados conclu√≠do!")

def test_cnpq_improvements():
    """Testa as melhorias implementadas"""
    
    print("\nüöÄ TESTE DAS MELHORIAS IMPLEMENTADAS")
    print("=" * 60)
    
    melhorias = [
        "‚úÖ M√∫ltiplas URLs para maior cobertura",
        "‚úÖ Seletores mais abrangentes (h1, h2, h3, h4, div, li, a)",
        "‚úÖ Busca em siblings para encontrar links relacionados",
        "‚úÖ Detec√ß√£o de diferentes tipos de elementos",
        "‚úÖ Logging detalhado para debug",
        "‚úÖ Tratamento robusto de erros",
        "‚úÖ Evita duplicatas com set de controle",
        "‚úÖ Fallback para URLs antigas"
    ]
    
    print("üìã Melhorias implementadas:")
    for melhoria in melhorias:
        print(f"   {melhoria}")
    
    print("\nüéØ Benef√≠cios esperados:")
    beneficios = [
        "‚Ä¢ Maior taxa de sucesso na detec√ß√£o de chamadas",
        "‚Ä¢ Cobertura de diferentes layouts de p√°gina",
        "‚Ä¢ Melhor rastreabilidade de problemas",
        "‚Ä¢ Redu√ß√£o de falhas por mudan√ßas no site",
        "‚Ä¢ Manuten√ß√£o mais f√°cil com logging detalhado"
    ]
    
    for beneficio in beneficios:
        print(f"   {beneficio}")
    
    print("\n‚úÖ Teste das melhorias conclu√≠do!")

if __name__ == "__main__":
    test_cnpq_selectors()
    test_cnpq_urls()
    test_cnpq_data_structure()
    test_cnpq_improvements()
    
    print("\nüéâ TODOS OS TESTES CONCLU√çDOS!")
    print("=" * 60)
    print("üí° Para testar o scraper real, execute:")
    print("   python scraper_unificado.py")
    print("\nüîç Verifique os logs para acompanhar o processo de extra√ß√£o.")
